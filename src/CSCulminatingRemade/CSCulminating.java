/*
 * Aliza Huynh 
 * CSCulminating.java
 * This program is used to solve triangles using sine law and cosine law
 * depending on what is inputted by the user and what is needed to be solved
 */

package CSCulminatingRemade;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.util.ArrayList;
//import java.text.*;
//import java.lang.Math;
/**
 *
 * @author alhuy9821
 */
public class CSCulminating extends javax.swing.JFrame {

    /**
     * Creates new form CSCulminating
     */
    
    public CSCulminating() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        secondAngleLabel = new javax.swing.JLabel();
        firstAngleLabel = new javax.swing.JLabel();
        thirdAngleLabel = new javax.swing.JLabel();
        secondSideLabel = new javax.swing.JLabel();
        firstSideLabel = new javax.swing.JLabel();
        thirdSideLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        solutionLabel = new javax.swing.JLabel();
        answerLabel = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        selectLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        firstAngleInput = new javax.swing.JTextField();
        secondAngleInput = new javax.swing.JTextField();
        thirdAngleInput = new javax.swing.JTextField();
        firstLengthInput = new javax.swing.JTextField();
        secondLengthInput = new javax.swing.JTextField();
        thirdLengthInput = new javax.swing.JTextField();
        solveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        clearFields = new javax.swing.JOptionPane();
        sineSelection = new javax.swing.JRadioButton();
        cosineSelection = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        secondAngleLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        secondAngleLabel.setForeground(new java.awt.Color(255, 255, 255));
        secondAngleLabel.setText("Angle 2:");

        firstAngleLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        firstAngleLabel.setForeground(new java.awt.Color(255, 255, 255));
        firstAngleLabel.setText("Angle 1:");

        thirdAngleLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        thirdAngleLabel.setForeground(new java.awt.Color(255, 255, 255));
        thirdAngleLabel.setText("Angle 3:");

        secondSideLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        secondSideLabel.setForeground(new java.awt.Color(255, 255, 255));
        secondSideLabel.setText("Side Length 2:");

        firstSideLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        firstSideLabel.setForeground(new java.awt.Color(255, 255, 255));
        firstSideLabel.setText("Side Length 1:");

        thirdSideLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        thirdSideLabel.setForeground(new java.awt.Color(255, 255, 255));
        thirdSideLabel.setText("Side Length 3:");

        titleLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 36)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("TRIANGLE SOLVER");

        solutionLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        solutionLabel.setForeground(new java.awt.Color(255, 255, 255));

        answerLabel.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        answerLabel.setForeground(new java.awt.Color(255, 255, 255));

        jLabel11.setFont(new java.awt.Font("FuturaTEEMed", 2, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("*Do not include units in entered measurements");

        selectLabel1.setFont(new java.awt.Font("FuturaTEEMed", 1, 18)); // NOI18N
        selectLabel1.setForeground(new java.awt.Color(255, 255, 255));
        selectLabel1.setText("Method:");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        solveButton.setText("Solve");
        solveButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                solveButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearButtonActionPerformed(evt);
            }
        });

        sineSelection.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(sineSelection);
        sineSelection.setFont(new java.awt.Font("FuturaTEEMed", 0, 18)); // NOI18N
        sineSelection.setForeground(new java.awt.Color(255, 255, 255));
        sineSelection.setText("Sine Law");
        sineSelection.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sineSelectionActionPerformed(evt);
            }
        });

        cosineSelection.setBackground(new java.awt.Color(51, 51, 51));
        buttonGroup1.add(cosineSelection);
        cosineSelection.setFont(new java.awt.Font("FuturaTEEMed", 0, 18)); // NOI18N
        cosineSelection.setForeground(new java.awt.Color(255, 255, 255));
        cosineSelection.setText("Cosine Law");
        cosineSelection.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cosineSelectionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(clearFields, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(thirdSideLabel)
                                        .addComponent(secondSideLabel)
                                        .addComponent(firstSideLabel))
                                    .addComponent(thirdAngleLabel)
                                    .addComponent(secondAngleLabel)
                                    .addComponent(firstAngleLabel))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(thirdLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(secondLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(thirdAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(secondAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(firstAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(solveButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(selectLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sineSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cosineSelection)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(solutionLabel)
                            .addComponent(answerLabel))))
                .addGap(326, 326, 326))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(90, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(59, 59, 59)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(firstAngleLabel)
                                        .addComponent(firstAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(secondAngleLabel)
                                        .addComponent(secondAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(thirdAngleLabel)
                                        .addComponent(thirdAngleInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel11)
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(firstSideLabel)
                                        .addComponent(firstLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(secondSideLabel)
                                        .addComponent(secondLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(thirdSideLabel)
                                        .addComponent(thirdLengthInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(26, 26, 26)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(solveButton)
                                        .addComponent(clearButton)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(sineSelection)
                                            .addComponent(cosineSelection))
                                        .addComponent(selectLabel1))
                                    .addGap(317, 317, 317)))
                            .addComponent(clearFields, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(titleLabel)
                        .addGap(66, 66, 66)
                        .addComponent(answerLabel)
                        .addGap(130, 130, 130)
                        .addComponent(solutionLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(43, 43, 43))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
      * if selected, the inputted measurements will solve the triangle using sine law
      * pre: values inputted by user will be inside boxes
      * post: clear all information inside boxes
      * final output will involve cleared text fields for user convenience
      */
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        //Display popup option frame to confirm whether user wants to clear all fields
        int YesOrNo = clearFields.showConfirmDialog(null,"Do you want to clear all measurements?","Clearing Measurements", clearFields.YES_NO_OPTION);
        //if yes, all text fields present in the window will be reset
        
        if(YesOrNo == 0)
        {
            //this sets all text fields to clear any existing inputted values
            firstAngleInput.setText(" ");
            secondAngleInput.setText(" ");
            thirdAngleInput.setText(" ");
            firstLengthInput.setText(" ");
            secondLengthInput.setText(" ");
            thirdLengthInput.setText(" ");
        }
    }//GEN-LAST:event_clearButtonActionPerformed
//    private void sineFindSideA() {
//        double sideA;
//        double angleA = Double.parseDouble(firstAngleInput.getText());
//        double angleB = Double.parseDouble(secondAngleInput.getText());
//        double angleC = Double.parseDouble(thirdAngleInput.getText());
//        double sideB = Double.parseDouble(secondLengthInput.getText());
//        double sideC = Double.parseDouble(thirdLengthInput.getText());
//        
//        DecimalFormat x = new DecimalFormat("###.##");
//        String answerText = ("Side A: " + ".");
//        answerLabel.setText(answerText);
//    }
    
    private void solveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solveButtonActionPerformed
        //when pressed, this button will take in given values and solve the triangle accordingly
        //variables for angles and scanner read inputted values on application window
        Scanner measurements = new Scanner(System.in);
        double angleA = measurements.nextDouble();
        double angleB = measurements.nextDouble();
        double angleC = measurements.nextDouble();
       
        //declaration of variables for sides
        double  sideA = measurements.nextDouble();
        double sideB = measurements.nextDouble();
        double sideC = measurements.nextDouble();
        
        //how to use alternative method to read text input from application?????
        //input arraylists somewhere***
        
        DecimalFormat x = new DecimalFormat("###.##");
        //certain cases and special cases like ambiguous case for triangle
        //in that case there cannot be a solution
        //other conditional statements for possible measurement intakes
        if (angleA > 0 && angleB > 0 && sideA > 0) {
            double[] aasSolution = AAS(angleA, angleB, sideA);
            
            System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format(angleB )+ "\n Angle C: " + x.format(aasSolution[1]));
            System.out.println("Side A = " + x.format(sideA) + "\n Side B: " + x.format(aasSolution[0]) + "\n Side C: " + x.format(aasSolution[2]));
        } 
        
         else if (angleA > 0 && angleC > 0 && sideA > 0) {
            double[] aasSolution = AAS(angleA, angleC, sideA);
            
            System.out.println("Side A: " + x.format(angleA )+ "\n Angle B: " + x.format(aasSolution[1]) + "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = " + x.format(sideA) + "\n Side B: " + x.format(aasSolution[2]) + "\n Side C: " + x.format(aasSolution[0]));
        } 
         
        else if (angleA > 0 && angleB > 0 && sideB > 0) {
            double[] aasSolution = AAS(angleB, angleA, sideB);
            
            System.out.println("Side A: " + x.format(angleA )+ "\n Angle B: " + x.format(angleB) + "\n Angle C: " + x.format(aasSolution[1]));
            System.out.println("Side A = " + x.format(aasSolution[0]) + "\n Side B: " + x.format(sideB) + "\n Side C: " + x.format(aasSolution[2]));
        } 
        
        //        double sideA = Double.parseDouble(firstLengthInput.getText());
//        double sideB = Double.parseDouble(secondLengthInput.getText());
//        double sideC = Double.parseDouble(thirdLengthInput.getText());
        
        else if (angleA > 0 && angleC > 0 && sideC > 0) {
            double[] aasSolution = AAS(angleC, angleA, sideC);
            
            System.out.println("Side A: " + x.format(angleA)+ "\n Angle B: " + x.format(aasSolution[1]) + "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = " + x.format(aasSolution[0]) + "\n Side B: " + x.format(aasSolution[2]) + "\n Side C: " + x.format(sideC));
        } 
        
        else if (angleA > 0 && angleC > 0 && sideA > 0) {
            double[] asaSolution = ASA(angleB, angleC, sideA);
            
            System.out.println("Side A: " + x.format(asaSolution[1]) + "\n Angle B: " + x.format(angleB) + "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = "+ x.format(sideA) + "\n Side B: " + x.format(asaSolution[2]) + "\n Side C: " + x.format(asaSolution[0]));
        } 
        
        else if (angleA > 0 && angleC > 0 && sideB > 0) {
            double[] asaSolution = ASA(angleA, angleC, sideB);
            
            System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format(asaSolution[1]) + "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = " + x.format(asaSolution[2]) + "\n Side B: " + x.format(sideB) + "\n Side C: " + x.format(asaSolution[0]));
        } 
        
        else if (angleB > 0 && angleC > 0 && sideB > 0) {
            double[] aasSolution = AAS(angleB, angleC, sideB);
            
            System.out.println("Side A: " + x.format(aasSolution[1]) + "\n Angle B: " + x.format(angleB) + "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = " + x.format(aasSolution[2]) + "\n Side B: " + x.format(sideB) + "\n Side C: " + x.format(aasSolution[0]));
        } 
        
        // private void sineFindAngleA(){
//        double angleA;
//        double angleB = Double.parseDouble(secondAngleInput.getText());
//        double angleC = Double.parseDouble(thirdAngleInput.getText());
        
        else if (angleB > 0 && angleC > 0 && sideC > 0) {
            double[] aasSolution = AAS(angleC, angleB, sideC);
            
            System.out.println("Side A: " + x.format(aasSolution[1]) + "\n Angle B: " + x.format(angleB )+ "\n Angle C: " + x.format(angleC));
            System.out.println("Side A = " + x.format(aasSolution[2]) + "\n Side B: " + x.format(aasSolution[0]) + "\n Side C: " + x.format(sideC));
        }
        
        else if (angleA > 0 && angleB > 0 && sideC > 0) {
            double[] asaSolution = ASA(angleA, angleB, sideC);
            //create this into a loop or a statement so that you cna declare ad solve for  at one time
            //        sideA = ((sideB * Math.sin(angleA)) / Math.sin(angleB));
            //        sideA = ((sideC * Math.asin(angleA)) / Math.sin(angleC));
            System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format(angleB) + "\n Angle C: " + x.format(asaSolution[1]));
            System.out.println("Side A: " + x.format(asaSolution[2]) + "\n Side B: " + x.format(asaSolution[0]) + "\n Side C: " + x.format(sideC));
        } 
        
        else if (angleA > 0 && sideA > 0 && sideB > 0) {
            double[] assSolution = ASS(angleA, sideA, sideB);
            
            System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format(assSolution[0]) + "\n Angle C: " + x.format(assSolution[1]));
            System.out.println("Side A: " + x.format(sideA) + "\n Side B: " + x.format(sideB )+ "\n Side C: " + x.format(assSolution[2]));
            
            if ((180 - assSolution[0] + angleA < 180)) {
                double[] aasSolution = AAS(angleA, 180 - assSolution[0], sideA);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format((180 - assSolution[0])) + "\n Angle C: " + x.format(aasSolution[1]));
                System.out.println("Side A: " + x.format(sideA) + "\n Side B: " + x.format(sideB) + "\n Side C: " + x.format(aasSolution[2]));
            }
            
        } else if (angleA > 0 && sideA > 0 && sideC > 0) {
            double[] assSolution = ASS(angleA, sideA, sideC);
            
            System.out.println("Side A: " + x.format(angleA)+ "\n Angle B: " + x.format(assSolution[1]) + "\n Angle C: " + x.format(assSolution[0]));
            System.out.println("Side A: " + x.format(sideA) + "\n Side B: " + x.format(assSolution[2]) + "\n Side C: " + x.format(sideC));
            
            if ((180 - assSolution[0] + angleA < 180)) {
                double[] aasSolution = AAS(angleA, 180 - assSolution[0], sideA);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + x.format(angleA) + "\n Angle B: " + x.format((180 - assSolution[0])) + "\n Angle C: " + x.format(aasSolution[1]));
                System.out.println("Side A: " + x.format(sideA) + "\n Side B: " + x.format(aasSolution[0]) + "\n Side C: " + x.format(sideC));
            }
            //        double angleA = Double.parseDouble(firstAngleInput.getText());
//        double sideB = Double.parseDouble(secondLengthInput.getText());
//        double sideC = Double.parseDouble(thirdLengthInput.getText());
        } 
        
        else if (angleB > 0 && sideB > 0 && sideA > 0) {//(Bba)
            double[] assSolution = ASS(angleB, sideB, sideA);
            
            System.out.println("Side A: " + assSolution[0] + "\n Angle B: " + angleB + "\n Angle C: " + assSolution[1]);
            System.out.println("Side A: " + sideA + "\n Side B: " + sideB + "\n Side C: " + assSolution[2]);
           
            if ((180 - assSolution[0] + angleB < 180)) {
                double[] aasSolution = AAS(angleB, 180 - assSolution[0], sideB);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + (180 - assSolution[0]) + "\n Angle B: " + angleB + "\n Angle C: " + aasSolution[1]);
                System.out.println("Side A: " + sideA + "\n Side B: " + sideB + "\n Side C: " + aasSolution[2]);
            }
            
        } 
        
        else if (angleB > 0 && sideB > 0 && sideC > 0) {
            double[] assSolution = ASS(angleB, sideB, sideC);
            
            System.out.println("Side A: " + assSolution[1] + "\n Angle B: " + angleB + "\n Angle C: " + assSolution[0]);
            System.out.println("Side A: " + assSolution[2] + "\n Side B: " + sideB + "\n Side C: " + sideC);
            
            if ((180 - assSolution[0] + angleB < 180)) {
                double[] aasSolution = AAS(angleB, 180 - assSolution[0], sideB);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + aasSolution[1] + "\n Angle B: " + angleB + "\n Angle C: " + (180 - assSolution[0]));
                System.out.println("Side A: "+ aasSolution[2] + "\n Side B: " + sideB + "\n Side C: " + sideC);
            }
            
        } 
        
        else if (angleC > 0 && sideC > 0 && sideA > 0) {
            double[] assSolution = ASS(angleC, sideC, sideA);
            
            System.out.println("Side A: " + assSolution[0] + "\n Angle B: " + assSolution[1] + "\n Angle C: " + angleC);
            System.out.println("Side A: " + sideA + "\n Side B: " + assSolution[2] + "\n Side C: " + sideC);
            
            if ((180 - assSolution[0] + angleC < 180)) {
                double[] aasSolution = AAS(angleC, 180 - assSolution[0], sideC);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + (180 - assSolution[0]) + "\n Angle B: " + aasSolution[1] + "\n Angle C: " + angleC);
                System.out.println("Side A: " + sideA + "\n Side B: " + aasSolution[2] + "\n Side C: " + sideC);
            }
            
        } 
        
        else if (angleC > 0 && sideC > 0 && sideB > 0) {
            double[] assSolution = ASS(angleC, sideC, sideB);
            
            System.out.println("Angle A: " + assSolution[1] + " \n Side B: " + assSolution[0] + "\n Angle C: " + angleC);
            System.out.println("Angle A: " + assSolution[2] + "\n Side B: " + sideB + "\n Side C: " + sideC);
            
            if ((180 - assSolution[0] + angleC < 180)) {
                double[] aasSolution = AAS(angleC, 180 - assSolution[0], sideC);
                
                System.out.printf(" -or- \n");
                System.out.println("Angle A: " + aasSolution[1] + "\n Angle B: " + (180 - assSolution[0]) + "\n AngleC: " + angleC);
                System.out.println("Side A: " + aasSolution[2] + "\n Side B: " + sideB + "\n  Side C: "  + sideC);
            }
            
        } 
        
        else if (sideA > 0 && sideB > 0 && sideC > 0) {
            angleA = SSS(sideA, sideB, sideC);
            double[] assSolution = ASS(angleA, sideA, sideB);
            
            System.out.println("Side A: " + angleA + "\n Angle B: " + assSolution[0] + "\n Angle C: " + assSolution[1]);
            System.out.println("Side A: " + sideA + "\n Side B: " + sideB + "\n Side C: " + sideC);
            
            if ((180 - assSolution[0] + angleA < 180)) {
                double[] aasSolution = AAS(angleA, 180 - assSolution[0], sideA);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + angleA + "\n Angle B: " + (180 - assSolution[0]) + "\n Angle C: " + aasSolution[1]);
                System.out.println("Side A: "+ sideA + "\n Side B: " + sideB + "\n Side C: " + sideC);
            }
            //double value = Double.parseDouble(firstAngleInput.getText());
        //DecimalFormat x = new DecimalFormat("#.##");
        } 
        
        //this only applies if the triangle is not a case of ambiguious triangle
        else if (angleA > 0 && sideB > 0 && sideC > 0) {
            sideA = SAS(angleA, sideB, sideC);
            double[] assSolution = ASS(angleA, sideA, sideB);
            
            System.out.println("Side A: " + angleA + "\n Angle B: " + assSolution[0] + "\n Angle C: " + assSolution[1]);
            System.out.println("Side A: " + sideA + "\n Side B: " + sideB + "\n Side C: " + sideC);
        } 
        
//        if (numberOfAngles == 3 && numberOfSides == 3) {
//			System.out.println("Complete triangle");
//		}
//		
//		if (numberOfAngles + numberOfSides < 3) {
//			System.out.println("Unsolvables");
//		}
//		
//		if (numberOfAngles == 3 && numberOfSides == 0) {
//			System.out.println("You have entered only angles");
//		}
//		
//		if(numberOfSides == 3 && numberOfAngles == 0) {
//			alpha = CosinesforAngle(a, b, c);
//			beta =  CosinesforAngle(b, a, c);
//			lambda = CosinesforAngle(c, a, b);
//		}
     //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//new arraylist for figuring out what needs to be solved
        ArrayList <String> measurementToFind = new ArrayList();
             //set everything to false intially
            boolean firstAngleGiven = false;
            boolean secondAngleGiven = false;
            boolean thirdAngleGiven = false;
            //sides
            boolean firstSideGiven = false;
            boolean secondSideGiven = false;
            boolean thirdSideGiven = false;
            //A B C pairs of angles and sides
            boolean angleSideA = false;
            boolean angleSideB = false;
            boolean angleSideC = false;
            //value of given inputs set zero
            double givenSideA = 0;
            double givenSideB = 0;
            double givenSideC = 0;
            //angles
            double givenAngleA = 0;
            double givenAngleB = 0;
            double givenAngleC = 0;
            
            if (firstSideGiven == false) 
            {
                    measurementToFind.add("Side A");
            }
            
            if (secondSideGiven == false) 
            {
                    measurementToFind.add("Side B");
            }
            
            if (thirdSideGiven == false) 
            {
                    measurementToFind.add("Side C");
            }
            
            if (firstAngleGiven == false) 
            {
                    measurementToFind.add("Angle A");
            }
            
            if (secondAngleGiven == false) 
            {
                    measurementToFind.add("Angle B");
            }
            
            if (thirdAngleGiven == false) 
            {
                    measurementToFind.add("Angle C");
            }
           
            //in ordert o solve for sides
            for (int i = 0; i < measurementToFind.size(); i++) 
            {
                
                    if (measurementToFind.get(i).equals("a")) 
                    {
                            if (angleSideB && angleSideA) 
                            {
                                givenSideA =  SinesForSide(givenSideB, givenAngleB, givenAngleA);
                            }
                            
                            if (angleSideC && angleSideA) 
                            {
                                givenSideA =  SinesForSide(givenSideC, givenAngleC, givenAngleA);
                            }
                    }
                    
                    if (measurementToFind.get(i).equals("c")) {
                        if (angleSideB && thirdAngleGiven) 
                        {
                                givenSideC =  SinesForSide(givenSideB, givenAngleB, givenAngleC);
                        }
                        
                        if (angleSideA && thirdAngleGiven) 
                        {
                                givenSideA =  SinesForSide(givenSideA, givenAngleA, givenAngleC);
                        }
                    }
                    
                    if (measurementToFind.get(i).equals("b")) 
                    {
                        if (angleSideC && secondAngleGiven) 
                        {
                                givenSideB =  SinesForSide(givenSideC, givenAngleC, givenAngleB);
                        }
                        if (angleSideA && secondAngleGiven) 
                        {
                                givenSideB =  SinesForSide(givenSideA, givenAngleA, givenAngleB);
                        }
                    }
        //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        //not ambigous alternative
        else if (angleC > 0 && sideA > 0 && sideB > 0) {
            sideC = SAS(angleC, sideA, sideB);
            double[] assSolution = ASS(angleC, sideC, sideB);
            
            System.out.println("Side A: " + assSolution[1] + "\n Angle B: " + assSolution[0] + "\n Angle C: " + angleC);
            System.out.println("Side A: " + assSolution[2] + "\n Side B: " + sideB + "\n Side C: " + sideC);
        } 
        
        //same application as above
        else if (angleB > 0 && sideA > 0 && sideC > 0) {
            sideB = SAS(angleB, sideA, sideC);
            double[] assSolution = ASS(angleB, sideB, sideC);
            
            System.out.println("Side A: " + assSolution[1] + "\n Angle B: " + angleB + "\n Angle C: " + assSolution[0]);
            System.out.println("Side A: " + assSolution[2] + "\n Side B: " + sideB + "\n Side C: " + sideC);
        } 
        
        //ambig. or if necessary
        else {
            sideC = SAS(angleC, sideB, sideA);
            double[] assSolution = ASS(angleC, sideC, sideA);
            
            System.out.println("Side A: " + assSolution[0] + "\n Angle B: " + assSolution[1] + "\n Angle C: " + angleC);
            System.out.println("Side A = " + sideA + "\n Side B: " + sideB + "\n Side C: " + sideC);
            
            if ((180 - assSolution[0] + angleC < 180)) {
                double[] aasSolution = AAS(angleC, 180 - assSolution[0], sideC);
                
                System.out.printf(" -or- \n");
                System.out.println("Side A: " + (180 - assSolution[0]) + "\n Angle B: " + aasSolution[1] + "\n Angle C: " + angleC);
                System.out.println("Side A: " + sideA + "\n Side B = " + sideB + "\n Side C: " + sideC);
            }
        }
    }
    }//GEN-LAST:event_solveButtonActionPerformed

    private void sineSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sineSelectionActionPerformed
        //String solutionText = 
        solutionLabel.setText("TO FIND AN ANGLE USING SINE LAW: \n" 
                  + "*You must be given an angle-side pair of measurements, as well as the angle/side measurement opposite the angle/side you are trying to find. \n"
                  + "1. Multiply the side length opposite the missing angle and the sine of the given angle \n"
                  + "2. Divide by the given side length \n"
                  + "3. Take the inverse sine of this answer. \n"
                  + "TO FIND A SIDE LENGTH USING SINE LAW: \n"
                  + "1. Multiply the given side length with the sine of the angle opposite the side you are looking for \n"
                  + "2. Divide this number by the sine of the given angle" );
        //solutionLabel.setText(solutionText);
    }//GEN-LAST:event_sineSelectionActionPerformed

    private void cosineSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosineSelectionActionPerformed
         //String solutionText = 
         solutionLabel.setText("TO FIND AN ANGLE USING COSINE LAW: \n"
                   + "*You must be given measurements that correspond to SAS, ASA, AAS, or SSS \n"
                   + "1. Square the lengths of the two sides not corresponding to the angle you are trying to find, and add them together \n"
                   + "2. Subtract the square of the side length corresponding to the angle you are trying to find \n"
                   + "3. Divide this number by the product of the two (unsquared) intial sidelengths, multiplied by 2. \n" 
                   + "TO FIND A SIDE LENGTH USING COSINE LAW: \n"
                   + "*You must be given two side lengths" );
        //solutionLabel.setText(solutionText);
    }//GEN-LAST:event_cosineSelectionActionPerformed
  /**
     * Uses user inputted values in order to solve for missing values
     * measurements that are inputted will be used in calculations
     * @param firstGivenSide
     * @param secondGivenSide
     * @param thirdGivenSide
     * @return
     */
    public static double SSS(double firstGivenSide, double secondGivenSide, double thirdGivenSide){
        //NOTE java does math in radians; MUST CONVERT TO DEGREES OR DO ALL IN RAD
        double unknownAngle = Math.toDegrees(Math.acos(((firstGivenSide * firstGivenSide) - (secondGivenSide * secondGivenSide) - (thirdGivenSide * thirdGivenSide))/(-2 * secondGivenSide * thirdGIvenSide)));
        //output solved angle basedon above calculation
        return unknownAngle;
    }
   
    /**
     * Uses user inputted values in order to solve for missing values
     * given two angles and a side
     * @param firstGivenAngle
     * @param secondGivenAngle
     * @param firstGivenSide
     * @return
     */
    public static double[] AAS(double firstGivenAngle, double secondGivenAngle, double firstGivenSide){
        double[] solution = new double[3];
        
        //depending on whether it is ambiguous or other special case
        solution[0] = ((Math.sin (Math.toRadians(secondGivenAngle)) * firstGivenSide)) / (Math.sin(Math.toRadians(firstGivenAngle)));
        solution[1] = 180 - firstGivenAngle - secondGivenAngle;
        solution[2] = ((Math.sin (Math.toRadians(solution[1])) * firstGivenSide)) / (Math.sin(Math.toRadians(firstGivenAngle)));
        //depending on above 
        return solution;
    }
    
    /**
     * Uses user inputted values in order to solve for missing values
     * given side and two angles
     * @param firstGivenSide
     * @param firstGivenAngle
     * @param secondGivenAngle
     * @return
     */
    public static double SinesForSide(double firstGivenSide, double firstGivenAngle, double secondGivenAngle) {
            double finalAnswer = (firstGivenSide / Math.sin(firstGivenAngle)) * Math.sin(secondGivenAngle);
            System.out.println(firstGivenSide + "/sin" + firstGivenAngle + " * sin" + secondGivenAngle);
            //remember to convert deg to rad and vv
            finalAnswer = finalAnswer*Math.PI/180;
            //final output of answer based on above calculations and conversions
            return finalAnswer;
    }

    /**
     * Uses user inputted values in order to solve for missing values
     * given two sides and an angle
     * @param firstGivenAngle
     * @param secondGivenSide
     * @param thirdGivenSide
     * @return
     */
    public static double SAS(double firstGivenAngle, double secondGivenSide, double thirdGivenSide) {
        double unknownSide = Math.sqrt(((Math.pow(secondGivenSide, 2)) + (Math.pow(thirdGivenSide, 2))) - (2 * secondGivenSide * thirdGivenSide * Math.cos(Math.toRadians(firstGivenAngle))));
        //return value based on above calculation
        
        return unknownSide;
    }
    
    /**
     * Uses user inputted values in order to solve for missing values
     * measurements that are inputted will be used in calculations
     * @param firstGivenAngle
     * @param secondGivenAngle
     * @param thirdGivenSide
     * @return
     */
    //is user is given two angles and a correspoding side, solve for third angle using given angles (=180) and then use to solve
    public static double[] ASA(double firstGivenAngle, double secondGivenAngle, double thirdGivenSide){
        double[] solution = new double[3];
//        double angleA = Double.parseDouble(firstAngleInput.getText());
//        double sideA = Math.sqrt(Math.pow(sideB, 2) + Math.pow(sideC, 2) - (2 * sideB * sideC) * Math.cos(angleA));
        double unknownAngle = 180 - firstGivenAngle - secondGivenAngle;
        //depending on whether it is ambiguous or other special case
        solution[0] = ((Math.sin(Math.toRadians(secondGivenAngle)) * thirdGivenSide)) / (Math.sin(Math.toRadians(unknownAngle))); 
        solution[1] = unknownAngle; 
        solution[2] = ((Math.sin(Math.toRadians(firstGivenAngle)) * thirdGivenSide)) / (Math.sin(Math.toRadians(unknownAngle)));
        return solution;
    }
    
    /**
     * Uses user inputted values in order to solve for missing values
     * measurements that are inputted will be used in calculations
     * @param firstGivenAngle
     * @param firstGivenSide
     * @param secondGivenSide
     * @return
     */
    public static double[] ASS(double firstGivenAngle, double firstGivenSide, double secondGivenSide){
        double[] solution = new double[3];
        //convert to degrees
        //depending on whether it is ambiguous or other special case
        solution[0] = Math.toDegrees(Math.asin((firstGivenSide * (Math.sin(Math.toRadians(firstGivenAngle)))) / (firstGivenSide)));
        solution[1] = 180 - solution[0] - firstGivenAngle;
        solution[2] = ((Math.sin(Math.toRadians(solution[1])) * firstGivenSide)) / (Math.sin(Math.toRadians(firstGivenAngle)));
        
        return solution;
    }

//    private void cosineFindAngleA() {
//        double sideA = Double.parseDouble(firstLengthInput.getText());
//        double sideB = Double.parseDouble(secondLengthInput.getText());
//        double sideC = Double.parseDouble(thirdLengthInput.getText());
//        
//        double angleA = Math.acos((Math.pow(sideB, 2) + Math.pow(sideC, 2) - Math.pow(sideA, 2)) / (-2 * sideB * sideC));
//        
//        DecimalFormat x = new DecimalFormat("###.##");
//        String answerText = ("Angle A: " + angleA + ".");
//        answerLabel.setText(answerText);
//    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CSCulminating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CSCulminating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CSCulminating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CSCulminating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CSCulminating().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answerLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearButton;
    private javax.swing.JOptionPane clearFields;
    private javax.swing.JRadioButton cosineSelection;
    private javax.swing.JTextField firstAngleInput;
    private javax.swing.JLabel firstAngleLabel;
    private javax.swing.JTextField firstLengthInput;
    private javax.swing.JLabel firstSideLabel;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField secondAngleInput;
    private javax.swing.JLabel secondAngleLabel;
    private javax.swing.JTextField secondLengthInput;
    private javax.swing.JLabel secondSideLabel;
    private javax.swing.JLabel selectLabel1;
    private javax.swing.JRadioButton sineSelection;
    private javax.swing.JLabel solutionLabel;
    private javax.swing.JButton solveButton;
    private javax.swing.JTextField thirdAngleInput;
    private javax.swing.JLabel thirdAngleLabel;
    private javax.swing.JTextField thirdLengthInput;
    private javax.swing.JLabel thirdSideLabel;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
